// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.

  // Класс намеренно подгоняется под интерфейс класса `SyntheticResponse` который используется в недрах аранги.
  // однако этот класс будет использоваться при формировании запросов между сервисами вместо http (в ArangoForeignCollectionMixin)
  var contentDisposition, crypto, fs, httperr, mediaTyper, mimeTypes, typeIs, vary,
    hasProp = {}.hasOwnProperty;

  crypto = require('@arangodb/crypto');

  httperr = require('http-errors');

  mediaTyper = require('media-typer');

  mimeTypes = require('mime-types');

  vary = require('vary');

  typeIs = require('type-is');

  fs = require('fs');

  contentDisposition = require('content-disposition');

  module.exports = function(Module) {
    var AnyT, CoreObject, FuncG, MIME_BINARY, MIME_JSON, MaybeG, SampleG, SyntheticResponse, UnionG, _, statuses;
    ({
      AnyT,
      FuncG,
      MaybeG,
      UnionG,
      SampleG,
      CoreObject,
      Utils: {_, statuses}
    } = Module.prototype);
    MIME_JSON = 'application/json; charset=utf-8';
    MIME_BINARY = 'application/octet-stream';
    return SyntheticResponse = (function() {
      class SyntheticResponse extends CoreObject {};

      SyntheticResponse.inheritProtected();

      SyntheticResponse.module(Module);

      SyntheticResponse.public({
        body: MaybeG(UnionG(Buffer, String))
      }, {
        set: function(data) {
          if (data == null) {
            return void 0;
          }
          if (_.isString(data) || _.isBuffer(data)) {
            return data;
          } else if (_.isObjectLike(data)) {
            if (this.context.isDevelopment) {
              return JSON.stringify(data, null, 2);
            } else {
              return JSON.stringify(data);
            }
          } else {
            return String(data);
          }
        }
      });

      SyntheticResponse.public({
        context: Object
      });

      SyntheticResponse.public({
        headers: Object
      });

      SyntheticResponse.public({
        cookies: Array
      }, {
        set: function(headers) {
          var name, value;
          if (!headers) {
            return {};
          }
          for (name in headers) {
            if (!hasProp.call(headers, name)) continue;
            value = headers[name];
            if (name.toLowerCase() === 'content-type') {
              this.contentType = value;
            }
          }
          return headers;
        }
      });

      SyntheticResponse.public({
        statusCode: MaybeG(Number)
      });

      SyntheticResponse.public({
        contentType: MaybeG(String)
      });

      SyntheticResponse.public({
        attachment: FuncG(String, SampleG(SyntheticResponse))
      }, {
        default: function(filename) {
          var ref;
          if (filename && !this.contentType) {
            this.contentType = (ref = mimeTypes.lookup(filename)) != null ? ref : MIME_BINARY;
          }
          this.set('Content-Disposition', contentDisposition(filename));
          return this;
        }
      });

      SyntheticResponse.public({
        download: FuncG([String, MaybeG(String)], SampleG(SyntheticResponse))
      }, {
        default: function(path, filename) {
          this.attachment(filename != null ? filename : path);
          this.sendFile(path);
          return this;
        }
      });

      SyntheticResponse.public({
        sendFile: FuncG([String, MaybeG(UnionG(Object, Boolean))], SampleG(SyntheticResponse))
      }, {
        default: function(filename, opts) {
          var lastModified, ref;
          if (_.isBoolean(opts)) {
            opts = {
              lastModified: opts
            };
          }
          if (!opts) {
            opts = {};
          }
          this.body = fs.readFileSync(filename);
          if (opts.lastModified || (opts.lastModified !== false && !this.headers['last-modified'])) {
            lastModified = new Date(fs.mtime(filename) * 1000);
            this.headers['last-modified'] = lastModified.toUTCString();
          }
          if (!this.contentType) {
            this.contentType = (ref = mimeTypes.lookup(filename)) != null ? ref : MIME_BINARY;
          }
          return this;
        }
      });

      SyntheticResponse.public({
        cookie: FuncG([String, String, MaybeG(UnionG(String, Number, Object))], SampleG(SyntheticResponse))
      }, {
        default: function(name, value, opts) {
          var signature, ttl;
          if (!opts) {
            opts = {};
          } else if (_.isString(opts)) {
            opts = {
              secret: opts
            };
          } else if (_.isNumber(opts)) {
            opts = {
              ttl: opts
            };
          }
          ttl = _.isNumber(opts.ttl) && opts.ttl !== 2e308 ? opts.ttl : void 0;
          this.addCookie(this, name, value, ttl, opts.path, opts.domain, opts.secure, opts.httpOnly);
          if (opts.secret) {
            signature = crypto.hmac(opts.secret, value, opts.algorithm);
            this.addCookie(this, `${name}.sig`, signature, ttl, opts.path, opts.domain, opts.secure, opts.httpOnly);
          }
          return this;
        }
      });

      SyntheticResponse.public({
        getHeader: FuncG(String, MaybeG(String))
      }, {
        default: function(name) {
          name = name.toLowerCase();
          if (name === 'content-type') {
            return this.contentType;
          }
          return this.headers[name];
        }
      });

      SyntheticResponse.public({
        removeHeader: FuncG(String, SampleG(SyntheticResponse))
      }, {
        default: function(name) {
          name = name.toLowerCase();
          if (name === 'content-type') {
            this.contentType = void 0;
          }
          delete this.headers[name];
          return this;
        }
      });

      SyntheticResponse.public({
        json: FuncG(AnyT, SampleG(SyntheticResponse))
      }, {
        default: function(value) {
          if (!this.contentType) {
            this.contentType = MIME_JSON;
          }
          if (pretty || this.context.isDevelopment) {
            this.body = JSON.stringify(value, null, 2);
          } else {
            this.body = JSON.stringify(value);
          }
          return this;
        }
      });

      SyntheticResponse.public({
        redirect: FuncG([UnionG(String, Number), MaybeG(String)], SampleG(SyntheticResponse))
      }, {
        default: function(status, path) {
          if (!path) {
            path = status;
            status = void 0;
          }
          if (status === 'permanent') {
            status = 301;
          }
          if (status || !this.statusCode) {
            this.statusCode = status != null ? status : 302;
          }
          this.setHeader('location', path);
          return this;
        }
      });

      SyntheticResponse.public({
        send: FuncG([AnyT, MaybeG(String)], SampleG(SyntheticResponse))
      }, {
        default: function(body, type) {
          var contentType, entry, handler, i, key, len, match, ref, ref1, ref2, ref3, response, result, status, value;
          if (body && body.isArangoResultSet) {
            body = body.toArray();
          }
          if (!type) {
            type = 'auto';
          }
          contentType = null;
          status = (ref = this.statusCode) != null ? ref : 200;
          response = this._responses.get(status);
          if (response) {
            if (response.model && response.model.forClient) {
              if (response.multiple && _.isArray(body)) {
                body = body.map(function(item) {
                  return response.model.forClient(item);
                });
              } else {
                body = response.model.forClient(body);
              }
            }
            if (type === 'auto' && response.contentTypes) {
              type = response.contentTypes[0];
              contentType = type;
            }
          }
          if (type === 'auto') {
            if (_.isBuffer(body)) {
              type = MIME_BINARY;
            } else if (body && _.isObjectLike(body)) {
              type = 'json';
            } else {
              type = 'html';
            }
          }
          type = (ref1 = mimeTypes.lookup(type)) != null ? ref1 : type;
          handler = null;
          ref2 = this.context.service.types.entries();
          for (i = 0, len = ref2.length; i < len; i++) {
            entry = ref2[i];
            key = entry[0];
            value = entry[1];
            if (_.isRegExp(key)) {
              match = type.test(key);
            } else if (_.isFunction(key)) {
              match = key(type);
            } else {
              match = typeIs.is(key, type);
            }
            if (match && value.forClient) {
              contentType = key;
              handler = value;
              break;
            }
          }
          if (handler) {
            result = handler.forClient(body, this, mediaTyper.parse(contentType));
            if (result.headers || result.data) {
              contentType = (ref3 = result.headers['content-type']) != null ? ref3 : contentType;
              this.set(result.headers);
              body = result.data;
            } else {
              body = result;
            }
          }
          this.body = body;
          if (contentType) {
            this.contentType = contentType;
          }
          return this;
        }
      });

      SyntheticResponse.public({
        sendStatus: FuncG([UnionG(String, Number)], SampleG(SyntheticResponse))
      }, {
        default: function(status) {
          var message, ref;
          if (_.isString(status)) {
            status = statuses(status);
          }
          message = String((ref = statuses[status]) != null ? ref : status);
          this.statusCode = status;
          this.body = message;
          return this;
        }
      });

      SyntheticResponse.public({
        set: FuncG([UnionG(String, Object), MaybeG(String)], SampleG(SyntheticResponse))
      }, {
        default: function(name, value) {
          if (name && _.isObjectLike(name)) {
            _.each(name, (v, k) => {
              return this.set(k, v);
            });
          } else {
            this.setHeader(name, value);
          }
          return this;
        }
      });

      SyntheticResponse.public({
        setHeader: FuncG([String, String], SampleG(SyntheticResponse))
      }, {
        default: function(name, value) {
          if (!name) {
            return this;
          }
          name = name.toLowerCase();
          if (name === 'content-type') {
            this.contentType = value;
          } else {
            this.headers[name] = value;
          }
          return this;
        }
      });

      SyntheticResponse.public({
        status: FuncG([UnionG(String, Number)], SampleG(SyntheticResponse))
      }, {
        default: function(status) {
          if (_.isString(status)) {
            status = statuses(status);
          }
          this.statusCode = status;
          return this;
        }
      });

      SyntheticResponse.public({
        throw: FuncG([UnionG(String, Number), MaybeG(UnionG(Error, String, Object)), MaybeG(Object)])
      }, {
        default: function(status, reason, options) {
          var err;
          if (_.isString(status)) {
            status = statuses(status);
          }
          if (_.isError(reason)) {
            err = reason;
            reason = err.message;
            options = Object.assign({
              cause: err,
              errorNum: err.errorNum
            }, options);
          }
          if (reason && _.isObjectLike(reason)) {
            options = reason;
            reason = void 0;
          }
          throw Object.assign(httperr(status, reason), {
            statusCode: status,
            status
          }, options);
        }
      });

      SyntheticResponse.public({
        type: FuncG([MaybeG(String)], MaybeG(String))
      }, {
        default: function(type) {
          var ref;
          if (type) {
            this.contentType = (ref = mimeTypes.lookup(type)) != null ? ref : type;
          }
          return this.contentType;
        }
      });

      SyntheticResponse.public({
        vary: Function
      }, {
        default: function(...args) {
          var header, i, len, ref, value, values;
          header = (ref = this.getHeader('vary')) != null ? ref : '';
          values = args.length === 1 ? args[0] : args;
          for (i = 0, len = values.length; i < len; i++) {
            value = values[i];
            header = vary.append(header, value);
          }
          this.setHeader('vary', header);
          return this;
        }
      });

      SyntheticResponse.public({
        write: FuncG(AnyT, SampleG(SyntheticResponse))
      }, {
        default: function(data) {
          var bodyB, bodyIsBuffer, dataB, dataIsBuffer;
          bodyIsBuffer = _.isBuffer(this.body);
          dataIsBuffer = _.isBuffer(data);
          if (data == null) {
            return this;
          }
          if (!dataIsBuffer) {
            if (_.isObjectLike(data)) {
              if (this.context.isDevelopment) {
                data = JSON.stringify(data, null, 2);
              } else {
                data = JSON.stringify(data);
              }
            } else {
              data = String(data);
            }
          }
          if (!this.body) {
            this.body = data;
          } else if (bodyIsBuffer || dataIsBuffer) {
            bodyB = bodyIsBuffer ? this.body : new Buffer(this.body);
            dataB = dataIsBuffer ? data : new Buffer(data);
            this.body = Buffer.concat([bodyB, dataB]);
          } else {
            this.body += data;
          }
          return this;
        }
      });

      SyntheticResponse.public({
        addCookie: Function
      }, {
        default: function(res, name, value, lifeTime, path, domain, secure, httpOnly) {
          var cookie;
          if (name === void 0) {
            return;
          }
          if (value === void 0) {
            return;
          }
          cookie = {name, value};
          if (lifeTime !== void 0 && lifeTime !== null) {
            cookie.lifeTime = parseInt(lifeTime, 10);
          }
          if (path !== void 0 && path !== null) {
            cookie.path = path;
          }
          if (domain !== void 0 && domain !== null) {
            cookie.domain = domain;
          }
          if (secure !== void 0 && secure !== null) {
            cookie.secure = secure ? true : false;
          }
          if (httpOnly !== void 0 && httpOnly !== null) {
            cookie.httpOnly = httpOnly ? true : false;
          }
          res.cookies.push(cookie);
        }
      });

      SyntheticResponse.public(SyntheticResponse.static(SyntheticResponse.async({
        restoreObject: Function
      }, {
        default: function*() {
          throw new Error(`restoreObject method not supported for ${this.name}`);
        }
      })));

      SyntheticResponse.public(SyntheticResponse.static(SyntheticResponse.async({
        replicateObject: Function
      }, {
        default: function*() {
          throw new Error(`replicateObject method not supported for ${this.name}`);
        }
      })));

      SyntheticResponse.public({
        init: Function
      }, {
        default: function(context) {
          this.super();
          this.headers = {};
          this.cookies = [];
          this.context = context;
          this._responses = new Map(); // перенесена из https://github.com/arangodb/arangodb/blob/69f32f92926dd60958f85dfacf4341478d657a45/js/server/modules/%40arangodb/foxx/router/response.js - но никакого наполнения данными этого мапа не происходит. - очень станный код.
        }
      });

      SyntheticResponse.initialize();

      return SyntheticResponse;

    }).call(this);
  };

}).call(this);
