// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.

  // TODO: Возможно стоит подумать над тем, чтобы повторно реиспользовать курсор, по которому уже прошлись один раз - например сохранять все итемы в кеш-скрытый массив, чтобы потом итерировать уже по ним.
  module.exports = function(Module) {
    var AnyT, ArangoCursor, CollectionInterface, CoreObject, CursorInterface, FuncG, MaybeG, PointerT, UnionG, _;
    ({
      AnyT,
      PointerT,
      FuncG,
      MaybeG,
      UnionG,
      CollectionInterface,
      CursorInterface,
      CoreObject,
      Utils: {_}
    } = Module.prototype);
    return ArangoCursor = (function() {
      var ipoCollection, ipoCursor;

      class ArangoCursor extends CoreObject {};

      ArangoCursor.inheritProtected();

      ArangoCursor.implements(CursorInterface);

      ArangoCursor.module(Module);

      ipoCursor = PointerT(ArangoCursor.private({
        cursor: MaybeG(Object)
      }));

      ipoCollection = PointerT(ArangoCursor.private({
        collection: MaybeG(CollectionInterface)
      }));

      ArangoCursor.public({
        isClosed: Boolean
      }, {
        default: false
      });

      ArangoCursor.public({
        setIterable: FuncG(Object, CursorInterface)
      }, {
        default: function(aoCursor) {
          this[ipoCursor] = aoCursor;
          return this;
        }
      });

      ArangoCursor.public({
        setCollection: FuncG(CollectionInterface, CursorInterface)
      }, {
        default: function(aoCollection) {
          this[ipoCollection] = aoCollection;
          return this;
        }
      });

      ArangoCursor.public(ArangoCursor.async({
        toArray: FuncG([], Array)
      }, {
        default: function*() {
          var results1;
          results1 = [];
          while ((yield this.hasNext())) {
            results1.push((yield this.next()));
          }
          return results1;
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        next: FuncG([], MaybeG(AnyT))
      }, {
        default: function*() {
          var data;
          if (this[ipoCursor] == null) {
            return;
          }
          data = (yield Module.prototype.Promise.resolve(this[ipoCursor].next()));
          switch (false) {
            case !(data == null):
              return data;
            case this[ipoCollection] == null:
              return (yield this[ipoCollection].normalize(data));
            default:
              return data;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        hasNext: FuncG([], Boolean)
      }, {
        default: function*() {
          return (yield Module.prototype.Promise.resolve(this[ipoCursor].hasNext()));
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        close: Function
      }, {
        default: function*() {
          var ref;
          yield Module.prototype.Promise.resolve((ref = this[ipoCursor]) != null ? ref.dispose() : void 0);
          this.isClosed = true;
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        count: FuncG([], Number)
      }, {
        default: function*(...args) {
          if (this[ipoCursor] == null) {
            return 0;
          }
          return (yield Module.prototype.Promise.resolve(this[ipoCursor].count(...args)));
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        forEach: FuncG(Function)
      }, {
        default: function*(lambda) {
          var err, index;
          index = 0;
          try {
            while ((yield this.hasNext())) {
              yield lambda((yield this.next()), index++);
            }
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        map: FuncG(Function, Array)
      }, {
        default: function*(lambda) {
          var err, index, results1;
          index = 0;
          try {
            results1 = [];
            while ((yield this.hasNext())) {
              results1.push((yield lambda((yield this.next()), index++)));
            }
            return results1;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        filter: FuncG(Function, Array)
      }, {
        default: function*(lambda) {
          var err, index, record, records;
          index = 0;
          records = [];
          try {
            while ((yield this.hasNext())) {
              record = (yield this.next());
              if ((yield lambda(record, index++))) {
                records.push(record);
              }
            }
            return records;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        find: FuncG(Function, MaybeG(AnyT))
      }, {
        default: function*(lambda) {
          var _record, err, index, record;
          index = 0;
          _record = null;
          try {
            while ((yield this.hasNext())) {
              record = (yield this.next());
              if ((yield lambda(record, index++))) {
                _record = record;
                break;
              }
            }
            return _record;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        compact: FuncG([], Array)
      }, {
        default: function*() {
          var err, index, rawResult, result, results;
          if (this[ipoCursor] == null) {
            return [];
          }
          index = 0;
          results = [];
          try {
            while ((yield this.hasNext())) {
              rawResult = (yield Module.prototype.Promise.resolve(this[ipoCursor].next()));
              if (!_.isEmpty(rawResult)) {
                result = (yield* (function*() {
                  switch (false) {
                    case this[ipoCollection] == null:
                      return (yield this[ipoCollection].normalize(rawResult));
                    default:
                      return rawResult;
                  }
                }).call(this));
                results.push(result);
              }
            }
            return results;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        reduce: FuncG([Function, AnyT], AnyT)
      }, {
        default: function*(lambda, initialValue) {
          var _initialValue, err, index;
          try {
            index = 0;
            _initialValue = initialValue;
            while ((yield this.hasNext())) {
              _initialValue = (yield lambda(_initialValue, (yield this.next()), index++));
            }
            return _initialValue;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.async({
        first: FuncG([], MaybeG(AnyT))
      }, {
        default: function*() {
          var err, result;
          try {
            result = (yield this.hasNext()) ? (yield this.next()) : null;
            return result;
          } catch (error) {
            err = error;
            yield this.close();
            throw err;
          }
        }
      }));

      ArangoCursor.public(ArangoCursor.static(ArangoCursor.async({
        restoreObject: Function
      }, {
        default: function*() {
          throw new Error(`restoreObject method not supported for ${this.name}`);
        }
      })));

      ArangoCursor.public(ArangoCursor.static(ArangoCursor.async({
        replicateObject: Function
      }, {
        default: function*() {
          throw new Error(`replicateObject method not supported for ${this.name}`);
        }
      })));

      ArangoCursor.public({
        init: FuncG([MaybeG(CollectionInterface), MaybeG(Object)])
      }, {
        default: function(aoCollection = null, aoCursor = null) {
          this.super(...arguments);
          if (aoCursor != null) {
            this[ipoCursor] = aoCursor;
          }
          if (aoCollection != null) {
            this[ipoCollection] = aoCollection;
          }
        }
      });

      ArangoCursor.initialize();

      return ArangoCursor;

    }).call(this);
  };

}).call(this);
