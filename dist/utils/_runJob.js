// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.
  var Queues, db,
    hasProp = {}.hasOwnProperty;

  Queues = require('@arangodb/foxx/queues');

  ({db} = require('@arangodb'));

  module.exports = function(FoxxMC) {
    return FoxxMC.prototype.Utils.runJob = function(cfg) {
      return (function({command = function() {}, failure = function() {}, context = module.context, retryOnFailure = false}) {
        var backOff, data, delay, e, err, job, jobId, key, maxFailures, opts, params, queue, queueName, ref, ref1, ref2, ref3, ref4, script, value;
        [params = {}, jobId] = (ref = context.argv) != null ? ref : [];
        if (jobId == null) {
          console.log('Run as not a job!');
          return typeof command === "function" ? command(params) : void 0;
        }
        ({
          queue: queueName
        } = db._jobs.document(jobId));
        queue = Queues.get(queueName);
        job = queue.get(jobId);
        try {
          if (typeof command === "function") {
            command(params, jobId);
          }
        } catch (error) {
          e = error;
          job.abort();
          try {
            if (typeof failure === "function") {
              failure(e, params, job);
            }
          } catch (error) {
            err = error;
            console.error('Failure', err);
          }
          if (retryOnFailure) {
            opts = {};
            ({
              maxFailures: opts.maxFailures,
              repeatDelay: opts.repeatDelay,
              repeatTimes: opts.repeatTimes,
              repeatUntil: opts.repeatUntil,
              failure: opts.failure,
              success: opts.success,
              backOff: opts.backOff
            } = db._jobs.document(jobId));
            for (key in opts) {
              if (!hasProp.call(opts, key)) continue;
              value = opts[key];
              if (value == null) {
                delete opts[key];
              }
            }
            maxFailures = (ref1 = (ref2 = job.type.maxFailures) != null ? ref2 : opts.maxFailures) != null ? ref1 : 0;
            if (maxFailures > 1 || maxFailures < 0 || maxFailures === 2e308) {
              opts.maxFailures = maxFailures;
              if (!(maxFailures < 0 || maxFailures === 2e308)) {
                --opts.maxFailures;
              }
              backOff = (ref3 = (ref4 = job.type.backOff) != null ? ref4 : opts.backOff) != null ? ref3 : 2000;
              delay = Math.random() < 0.5 ? backOff / 2 : backOff;
              opts.delayUntil = Date.now() + delay;
              script = Object.assign({}, job.type);
              data = Object.assign({}, params);
              queue.push(script, data, opts);
            }
          }
          throw e;
        }
      })(cfg);
    };
  };

}).call(this);
