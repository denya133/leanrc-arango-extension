// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.
  var hasProp = {}.hasOwnProperty;

  /*
  ```coffee
  module.exports = (Module)->
    {
      Configuration
      ArangoConfigurationMixin
    } = Module::

    class AppConfiguration extends Configuration
      @inheritProtected()
      @module Module
      @include ArangoConfigurationMixin

    return AppConfiguration.initialize()
  ```
  */
  /*
  ```coffee
  module.exports = (Module)->
    {
      CONFIGURATION

      SimpleCommand
      AppConfiguration
    } = Module::

    class PrepareModelCommand extends SimpleCommand
      @inheritProtected()

      @module Module

      @public execute: Function,
        default: ->
          #...
          @facade.registerProxy AppConfiguration.new CONFIGURATION
          #...

    PrepareModelCommand.initialize()
  ```
   */
  module.exports = function(Module) {
    var Configuration, Mixin, _;
    ({
      Configuration,
      Mixin,
      Utils: {_}
    } = Module.prototype);
    return Module.defineMixin(Mixin('ArangoConfigurationMixin', function(BaseClass = Configuration) {
      return (function() {
        var _Class;

        _Class = class extends BaseClass {};

        _Class.inheritProtected();

        _Class.public({
          defineConfigProperties: Function
        }, {
          default: function() {
            var configs, key, value;
            Reflect.defineProperty(this, 'name', {
              enumerable: true,
              configurable: true,
              writable: false,
              value: this.Module.context().manifest.name
            });
            Reflect.defineProperty(this, 'description', {
              enumerable: true,
              configurable: true,
              writable: false,
              value: this.Module.context().manifest.description
            });
            Reflect.defineProperty(this, 'license', {
              enumerable: true,
              configurable: true,
              writable: false,
              value: this.Module.context().manifest.license
            });
            Reflect.defineProperty(this, 'version', {
              enumerable: true,
              configurable: true,
              writable: false,
              value: this.Module.context().manifest.version
            });
            Reflect.defineProperty(this, 'keywords', {
              enumerable: true,
              configurable: true,
              writable: false,
              value: this.Module.context().manifest.keywords
            });
            configs = this.Module.context().configuration;
            for (key in configs) {
              if (!hasProp.call(configs, key)) continue;
              value = configs[key];
              ((attr, config) => {
                Reflect.defineProperty(this, attr, {
                  enumerable: true,
                  configurable: true,
                  writable: false,
                  value: config
                });
              })(key, value);
            }
          }
        });

        _Class.initializeMixin();

        return _Class;

      }).call(this);
    }));
  };

}).call(this);
