// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.

  // надо реализовать в отдельном модуле (npm-пакете) так как является платформозависимым
  // эта реализация должна имплементировать методы `parseQuery` и `executeQuery`.
  // последний должен возврашать результат с интерфейсом CursorInterface
  // но для хранения и получения данных должна обращаться к ArangoDB коллекциям.
  var Parser, db, qb,
    hasProp = {}.hasOwnProperty;

  ({db} = require('@arangodb'));

  qb = require('aqb');

  Parser = require('mongo-parse'); //mongo-parse@2.0.2

  module.exports = function(Module) {
    var AnyT, ArangoCursor, Collection, CursorInterface, DEBUG, DictG, EnumG, FuncG, InterfaceG, LEVELS, ListG, MaybeG, Mixin, MomentT, Query, QueryInterface, RecordInterface, SEND_TO_LOG, UnionG, _, moment;
    ({
      AnyT,
      MomentT,
      FuncG,
      UnionG,
      MaybeG,
      EnumG,
      ListG,
      DictG,
      InterfaceG,
      RecordInterface,
      CursorInterface,
      QueryInterface,
      Mixin,
      Collection,
      Query,
      ArangoCursor,
      LogMessage: {SEND_TO_LOG, LEVELS, DEBUG},
      Utils: {_, moment}
    } = Module.prototype);
    return Module.defineMixin(Mixin('ArangoCollectionMixin', function(BaseClass = Collection) {
      return (function() {
        var _Class, buildIntervalQuery, wrapReference;

        _Class = class extends BaseClass {};

        _Class.inheritProtected();

        // TODO: generateId был удален отсюда, т.к. был объявлен миксин GenerateUuidIdMixin который дефайнит этот метод с uuid.v4(), а использование этого миксина должно быть таковым, чтобы дефолтный generateId из Collection использовался (не возвращающий ничего)
        wrapReference = function(value) {
          if (_.isString(value) && /^[@]/.test(value)) {
            return qb.ref(value.replace('@', ''));
          } else {
            return qb(value);
          }
        };

        _Class.public(_Class.async({
          push: FuncG(RecordInterface, RecordInterface)
        }, {
          default: function*(aoRecord) {
            var vhObjectForInsert, voNativeCursor, voQuery, vsQuery;
            vhObjectForInsert = (yield this.serialize(aoRecord));
            voQuery = qb.insert(qb(vhObjectForInsert)).into(this.collectionFullName()).returnNew('doc');
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::push vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return (yield this.normalize(voNativeCursor.next()));
          }
        }));

        // if voNativeCursor.hasNext()
        //   return yield @normalize voNativeCursor.next()
        // else
        //   yield return
        _Class.public(_Class.async({
          remove: FuncG([UnionG(String, Number)])
        }, {
          default: function*(id) {
            var voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(qb.eq(qb.ref('doc.id'), qb(id))).remove({
              _key: 'doc._key'
            }).into(this.collectionFullName());
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::remove vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            db._query(`${vsQuery}`);
          }
        }));

        _Class.public(_Class.async({
          take: FuncG([UnionG(String, Number)], MaybeG(RecordInterface))
        }, {
          default: function*(id) {
            var voNativeCursor, voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(qb.eq(qb.ref('doc.id'), qb(id))).return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::take vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            if (voNativeCursor.hasNext()) {
              return (yield this.normalize(voNativeCursor.next()));
            } else {

            }
          }
        }));

        _Class.public(_Class.async({
          takeBy: FuncG([Object, MaybeG(Object)], CursorInterface)
        }, {
          default: function*(query, options = {}) {
            var asRef, asSortDirect, i, len, sortObj, vnLimit, vnOffset, voNativeCursor, voQuery, voSort, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(this.parseFilter(Parser.parse(query)));
            if ((voSort = options.$sort) != null) {
              for (i = 0, len = voSort.length; i < len; i++) {
                sortObj = voSort[i];
                for (asRef in sortObj) {
                  if (!hasProp.call(sortObj, asRef)) continue;
                  asSortDirect = sortObj[asRef];
                  voQuery = voQuery.sort(wrapReference(asRef), asSortDirect);
                }
              }
            }
            if ((vnLimit = options.$limit) != null) {
              if ((vnOffset = options.$offset) != null) {
                voQuery = voQuery.limit(vnOffset, vnLimit);
              } else {
                voQuery = voQuery.limit(vnLimit);
              }
            }
            voQuery = voQuery.return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::takeBy vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return ArangoCursor.new(this, voNativeCursor);
          }
        }));

        _Class.public(_Class.async({
          takeMany: FuncG([ListG(UnionG(String, Number))], CursorInterface)
        }, {
          default: function*(ids) {
            var voNativeCursor, voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(qb.in(qb.ref('doc.id'), qb(ids))).return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::takeMany vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return ArangoCursor.new(this, voNativeCursor);
          }
        }));

        _Class.public(_Class.async({
          takeAll: FuncG([], CursorInterface)
        }, {
          default: function*() {
            var voNativeCursor, voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::takeAll vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return ArangoCursor.new(this, voNativeCursor);
          }
        }));

        _Class.public(_Class.async({
          override: FuncG([UnionG(String, Number), RecordInterface], RecordInterface)
        }, {
          default: function*(id, aoRecord) {
            var vhObjectForUpdate, voNativeCursor, voQuery, vsQuery;
            vhObjectForUpdate = _.omit((yield this.serialize(aoRecord)), ['id', '_key']);
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(qb.eq(qb.ref('doc.id'), qb(id))).update(qb.ref('doc')).with(qb(vhObjectForUpdate)).into(this.collectionFullName()).returnNew('newDoc');
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::override vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return (yield this.normalize(voNativeCursor.next()));
          }
        }));

        _Class.public(_Class.async({
          includes: FuncG([UnionG(String, Number)], Boolean)
        }, {
          default: function*(id) {
            var voNativeCursor, voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(qb.eq(qb.ref('doc.id'), qb(id))).limit(qb(1)).return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::includes vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return voNativeCursor.hasNext();
          }
        }));

        _Class.public(_Class.async({
          exists: FuncG(Object, Boolean)
        }, {
          default: function*(query) {
            var voNativeCursor, voQuery, vsQuery;
            voQuery = qb.for('doc').in(this.collectionFullName()).filter(this.parseFilter(Parser.parse(query))).limit(qb(1)).return(qb.ref('doc'));
            vsQuery = voQuery.toAQL();
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::exists vsQuery ${vsQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${vsQuery}`);
            return voNativeCursor.hasNext();
          }
        }));

        _Class.public(_Class.async({
          length: FuncG([], Number)
        }, {
          default: function*() {
            var collection;
            // voQuery = qb.for 'doc'
            //   .in @collectionFullName()
            //   .collectWithCountInto 'count'
            //   .return qb.ref 'count'
            // vsQuery = voQuery.toAQL()
            // voNativeCursor = db._query "#{vsQuery}"
            // yield return voNativeCursor.next()
            collection = db._collection(this.collectionFullName());
            return collection.count();
          }
        }));

        buildIntervalQuery = FuncG([Object, MomentT, EnumG('day', 'week', 'month', 'year'), Boolean], Object)(function(aoKey, aoInterval, aoIntervalSize, aoDirect) {
          var voIntervalEnd, voIntervalStart;
          aoInterval = aoInterval.utc();
          voIntervalStart = aoInterval.startOf(aoIntervalSize).toISOString();
          voIntervalEnd = aoInterval.clone().endOf(aoIntervalSize).toISOString();
          if (aoDirect) {
            return qb.and(...[qb.gte(aoKey, qb(voIntervalStart)), qb.lt(aoKey, qb(voIntervalEnd))]);
          } else {
            return qb.not(qb.and(...[qb.gte(aoKey, qb(voIntervalStart)), qb.lt(aoKey, qb(voIntervalEnd))]));
          }
        });

        _Class.public({
          operatorsMap: DictG(String, Function)
        }, {
          default: {
            // Logical Query Operators
            $and: function(items) {
              return qb.and(..._.castArray(items));
            },
            $or: function(items) {
              return qb.or(..._.castArray(items));
            },
            $not: function(items) {
              return qb.not(..._.castArray(items));
            },
            $nor: function(items) {
              return qb.not(qb.or(..._.castArray(items))); // not or # !(a||b) === !a && !b
            },
            $where: function(...args) {
              throw new Error('Not supported');
            },
            // Comparison Query Operators (aoSecond is NOT sub-query)
            $eq: function(aoFirst, aoSecond) {
              return qb.eq(wrapReference(aoFirst), wrapReference(aoSecond)); // ==
            },
            $ne: function(aoFirst, aoSecond) {
              return qb.neq(wrapReference(aoFirst), wrapReference(aoSecond)); // !=
            },
            $lt: function(aoFirst, aoSecond) {
              return qb.lt(wrapReference(aoFirst), wrapReference(aoSecond)); // <
            },
            $lte: function(aoFirst, aoSecond) {
              return qb.lte(wrapReference(aoFirst), wrapReference(aoSecond)); // <=
            },
            $gt: function(aoFirst, aoSecond) {
              return qb.gt(wrapReference(aoFirst), wrapReference(aoSecond)); // >
            },
            $gte: function(aoFirst, aoSecond) {
              return qb.gte(wrapReference(aoFirst), wrapReference(aoSecond)); // >=
            },
            $in: function(aoFirst, alItems) { // check value present in array
              return qb.in(wrapReference(aoFirst), qb(alItems));
            },
            $nin: function(aoFirst, alItems) { // ... not present in array
              return qb.notIn(wrapReference(aoFirst), qb(alItems));
            },
            // Array Query Operators
            $all: function(aoFirst, alItems) { // contains some values
              return qb.and(...(alItems.map(function(aoItem) {
                return qb.in(wrapReference(aoItem), wrapReference(aoFirst));
              })));
            },
            $elemMatch: function(aoFirst, aoSecond) { // conditions for complex item
              var voFilter, voFirst, wrappedReference;
              wrappedReference = aoFirst.replace('@', '');
              voFilter = qb.and(...aoSecond).toAQL();
              voFirst = qb.expr(`LENGTH(${wrappedReference}[* FILTER ${voFilter}])`);
              return qb.gt(voFirst, qb(0));
            },
            $size: function(aoFirst, aoSecond) {
              var voFirst;
              voFirst = qb.expr(`LENGTH(${aoFirst.replace('@', '')})`);
              return qb.eq(voFirst, wrapReference(aoSecond)); // condition for array length
            },
            
            // Element Query Operators
            $exists: function(aoFirst, aoSecond) { // condition for check present some value in field
              var voFirst;
              voFirst = qb.expr(`HAS(${aoFirst.replace('@', '')})`);
              return qb.eq(voFirst, wrapReference(aoSecond));
            },
            $type: function(aoFirst, aoSecond) {
              var voFirst;
              voFirst = qb.expr(`TYPENAME(${aoFirst.replace('@', '')})`);
              return qb.eq(voFirst, wrapReference(aoSecond)); // check value type
            },
            
            // Evaluation Query Operators
            $mod: function(aoFirst, [divisor, remainder]) {
              return qb.eq(qb.mod(wrapReference(aoFirst), qb(divisor)), qb(remainder));
            },
            $regex: function(aoFirst, aoSecond) { // value must be string. ckeck it by RegExp.
              var full, params, regExpDefinitions, regexp;
              regExpDefinitions = /^\/([\s\S]*)\/(i?)$/i.exec(aoSecond);
              if (regExpDefinitions == null) {
                throw new Error("Invalid Regular Expression");
              }
              [full, regexp, params] = regExpDefinitions;
              return qb.expr(`REGEX_TEST(${aoFirst.replace('@', '')}, \"${String(regexp)}\", ${params === 'i'})`);
            },
            // Datetime Query Operators
            $td: function(aoFirst, aoSecond) { // this day (today)
              return buildIntervalQuery(wrapReference(aoFirst), moment(), 'day', aoSecond);
            },
            $ld: function(aoFirst, aoSecond) { // last day (yesterday)
              return buildIntervalQuery(wrapReference(aoFirst), moment().subtract(1, 'days'), 'day', aoSecond);
            },
            $tw: function(aoFirst, aoSecond) { // this week
              return buildIntervalQuery(wrapReference(aoFirst), moment(), 'week', aoSecond);
            },
            $lw: function(aoFirst, aoSecond) { // last week
              return buildIntervalQuery(wrapReference(aoFirst), moment().subtract(1, 'weeks'), 'week', aoSecond);
            },
            $tm: function(aoFirst, aoSecond) { // this month
              return buildIntervalQuery(wrapReference(aoFirst), moment(), 'month', aoSecond);
            },
            $lm: function(aoFirst, aoSecond) { // last month
              return buildIntervalQuery(wrapReference(aoFirst), moment().subtract(1, 'months'), 'month', aoSecond);
            },
            $ty: function(aoFirst, aoSecond) { // this year
              return buildIntervalQuery(wrapReference(aoFirst), moment(), 'year', aoSecond);
            },
            $ly: function(aoFirst, aoSecond) { // last year
              return buildIntervalQuery(wrapReference(aoFirst), moment().subtract(1, 'years'), 'year', aoSecond);
            }
          }
        });

        _Class.public({
          parseFilter: FuncG(InterfaceG({
            field: MaybeG(String),
            parts: MaybeG(ListG(Object)),
            operator: MaybeG(String),
            operand: MaybeG(AnyT),
            implicitField: MaybeG(Boolean)
          }), Object)
        }, {
          default: function({field, parts = [], operator, operand, implicitField}) {
            var customFilter, customFilterFunc;
            if ((field != null) && operator !== '$elemMatch' && parts.length === 0) {
              if (field === '$not') {
                throw new Error('`$not` must be defined in field operand');
              }
              customFilter = this.delegate.customFilters[field];
              if ((customFilterFunc = customFilter != null ? customFilter[operator] : void 0) != null) {
                return qb.expr(customFilterFunc.call(this, operand));
              } else {
                return this.operatorsMap[operator](field, operand);
              }
            } else if ((field != null) && operator === '$elemMatch') {
              if (implicitField === true) {
                return this.operatorsMap[operator](field, parts.map((part) => {
                  part.field = "@CURRENT";
                  return this.parseFilter(part);
                }));
              } else {
                return this.operatorsMap[operator](field, parts.map((part) => {
                  part.field = `@CURRENT.${part.field}`;
                  return this.parseFilter(part);
                }));
              }
            } else {
              return this.operatorsMap[operator != null ? operator : '$and'](parts.map(this.parseFilter.bind(this)));
            }
          }
        });

        _Class.public(_Class.async({
          parseQuery: FuncG([UnionG(Object, QueryInterface)], UnionG(Object, String, QueryInterface))
        }, {
          default: function*(aoQuery) {
            var finAggPartial, finAggUsed, intoPartial, intoUsed, isCustomReturn, voQuery, vsQuery;
            voQuery = null;
            intoUsed = intoPartial = finAggUsed = finAggPartial = null;
            isCustomReturn = false;
            if (aoQuery.$remove != null) {
              yield this.wrap(function*() {
                var aoValue, asCollectionFullName, asItemRef, asRef, ref, ref1, vlJoinFilters, vnLimit, vnOffset, voFilter, voJoin, voLet, voSort, vsValue;
                if (aoQuery.$forIn != null) {
                  ref = aoQuery.$forIn;
                  for (asItemRef in ref) {
                    if (!hasProp.call(ref, asItemRef)) continue;
                    asCollectionFullName = ref[asItemRef];
                    voQuery = (voQuery != null ? voQuery : qb).for(qb.ref(asItemRef.replace('@', ''))).in(asCollectionFullName);
                  }
                  if ((voJoin = (ref1 = aoQuery.$join) != null ? ref1.$and : void 0) != null) {
                    vlJoinFilters = voJoin.map(function(mongoFilter) {
                      var asRelValue, voItemRef, voRelValue;
                      asItemRef = Object.keys(mongoFilter)[0];
                      ({
                        $eq: asRelValue
                      } = mongoFilter[asItemRef]);
                      voItemRef = wrapReference(asItemRef);
                      voRelValue = wrapReference(asRelValue);
                      return qb.eq(voItemRef, voRelValue);
                    });
                    voQuery = voQuery.filter(qb.and(...vlJoinFilters));
                  }
                  if ((voFilter = aoQuery.$filter) != null) {
                    voQuery = voQuery.filter(this.parseFilter(Parser.parse(voFilter)));
                  }
                  if ((voLet = aoQuery.$let) != null) {
                    for (asRef in voLet) {
                      if (!hasProp.call(voLet, asRef)) continue;
                      aoValue = voLet[asRef];
                      vsValue = String((yield this.parseQuery(Query.new(aoValue))));
                      voQuery = (voQuery != null ? voQuery : qb).let(asRef, qb.expr(vsValue));
                    }
                  }
                  if ((voSort = aoQuery.$sort) != null) {
                    voQuery = voQuery.sort(...((function() {
                      var asSortDirect, i, len, sortObj, vlSort;
                      vlSort = [];
                      for (i = 0, len = voSort.length; i < len; i++) {
                        sortObj = voSort[i];
                        for (asRef in sortObj) {
                          if (!hasProp.call(sortObj, asRef)) continue;
                          asSortDirect = sortObj[asRef];
                          vlSort.push(wrapReference(asRef));
                          vlSort.push(asSortDirect);
                        }
                      }
                      return vlSort;
                    })()));
                  }
                  if ((vnLimit = aoQuery.$limit) != null) {
                    if ((vnOffset = aoQuery.$offset) != null) {
                      voQuery = voQuery.limit(vnOffset, vnLimit);
                    } else {
                      voQuery = voQuery.limit(vnLimit);
                    }
                  }
                  isCustomReturn = true;
                  voQuery = (voQuery != null ? voQuery : qb).remove({
                    _key: wrapReference("@doc._key")
                  });
                  if (aoQuery.$into != null) {
                    voQuery = voQuery.into(aoQuery.$into);
                  }
                }
              })();
            } else if (aoQuery.$patch != null) {
              yield this.wrap(function*() {
                var aoValue, asCollectionFullName, asItemRef, asRef, ref, ref1, vhObjectForUpdate, vlJoinFilters, vnLimit, vnOffset, voFilter, voJoin, voLet, voSort, vsValue;
                if (aoQuery.$into != null) {
                  if (aoQuery.$forIn != null) {
                    ref = aoQuery.$forIn;
                    for (asItemRef in ref) {
                      if (!hasProp.call(ref, asItemRef)) continue;
                      asCollectionFullName = ref[asItemRef];
                      voQuery = (voQuery != null ? voQuery : qb).for(qb.ref(asItemRef.replace('@', ''))).in(asCollectionFullName);
                    }
                    if ((voJoin = (ref1 = aoQuery.$join) != null ? ref1.$and : void 0) != null) {
                      vlJoinFilters = voJoin.map(function(mongoFilter) {
                        var asRelValue, voItemRef, voRelValue;
                        asItemRef = Object.keys(mongoFilter)[0];
                        ({
                          $eq: asRelValue
                        } = mongoFilter[asItemRef]);
                        voItemRef = wrapReference(asItemRef);
                        voRelValue = wrapReference(asRelValue);
                        return qb.eq(voItemRef, voRelValue);
                      });
                      voQuery = voQuery.filter(qb.and(...vlJoinFilters));
                    }
                    if ((voFilter = aoQuery.$filter) != null) {
                      voQuery = voQuery.filter(this.parseFilter(Parser.parse(voFilter)));
                    }
                    if ((voLet = aoQuery.$let) != null) {
                      for (asRef in voLet) {
                        if (!hasProp.call(voLet, asRef)) continue;
                        aoValue = voLet[asRef];
                        vsValue = String((yield this.parseQuery(Query.new(aoValue))));
                        voQuery = (voQuery != null ? voQuery : qb).let(asRef, qb.expr(vsValue));
                      }
                    }
                    if ((voSort = aoQuery.$sort) != null) {
                      voQuery = voQuery.sort(...((function() {
                        var asSortDirect, i, len, sortObj, vlSort;
                        vlSort = [];
                        for (i = 0, len = voSort.length; i < len; i++) {
                          sortObj = voSort[i];
                          for (asRef in sortObj) {
                            if (!hasProp.call(sortObj, asRef)) continue;
                            asSortDirect = sortObj[asRef];
                            vlSort.push(wrapReference(asRef));
                            vlSort.push(asSortDirect);
                          }
                        }
                        return vlSort;
                      })()));
                    }
                    if ((vnLimit = aoQuery.$limit) != null) {
                      if ((vnOffset = aoQuery.$offset) != null) {
                        voQuery = voQuery.limit(vnOffset, vnLimit);
                      } else {
                        voQuery = voQuery.limit(vnLimit);
                      }
                    }
                  }
                  vhObjectForUpdate = _.omit(aoQuery.$patch, ['id', '_key']);
                  isCustomReturn = true;
                  voQuery = (voQuery != null ? voQuery : qb).update(qb.ref('doc')).with(qb(vhObjectForUpdate)).into(aoQuery.$into);
                }
              })();
            } else if (aoQuery.$forIn != null) {
              yield this.wrap(function*() {
                var aoValue, asCollectionFullName, asItemRef, asRef, key, ref, ref1, value, vhObj, vlJoinFilters, vnLimit, vnOffset, voCollect, voFilter, voHaving, voJoin, voLet, voReturn, voSort, vsAvg, vsInto, vsMax, vsMin, vsSum, vsValue;
                ref = aoQuery.$forIn;
                for (asItemRef in ref) {
                  if (!hasProp.call(ref, asItemRef)) continue;
                  asCollectionFullName = ref[asItemRef];
                  voQuery = (voQuery != null ? voQuery : qb).for(qb.ref(asItemRef.replace('@', ''))).in(asCollectionFullName);
                }
                if ((voJoin = (ref1 = aoQuery.$join) != null ? ref1.$and : void 0) != null) {
                  vlJoinFilters = voJoin.map(function(mongoFilter) {
                    var asRelValue, voItemRef, voRelValue;
                    asItemRef = Object.keys(mongoFilter)[0];
                    ({
                      $eq: asRelValue
                    } = mongoFilter[asItemRef]);
                    voItemRef = wrapReference(asItemRef);
                    voRelValue = wrapReference(asRelValue);
                    return qb.eq(voItemRef, voRelValue);
                  });
                  voQuery = voQuery.filter(qb.and(...vlJoinFilters));
                }
                if ((voFilter = aoQuery.$filter) != null) {
                  voQuery = voQuery.filter(this.parseFilter(Parser.parse(voFilter)));
                }
                if ((voLet = aoQuery.$let) != null) {
                  for (asRef in voLet) {
                    if (!hasProp.call(voLet, asRef)) continue;
                    aoValue = voLet[asRef];
                    vsValue = String((yield this.parseQuery(Query.new(aoValue))));
                    voQuery = (voQuery != null ? voQuery : qb).let(asRef, qb.expr(vsValue));
                  }
                }
                if ((voCollect = aoQuery.$collect) != null) {
                  isCustomReturn = true;
                  for (asRef in voCollect) {
                    if (!hasProp.call(voCollect, asRef)) continue;
                    aoValue = voCollect[asRef];
                    vsValue = String((yield this.parseQuery(Query.new(aoValue))));
                    voQuery = voQuery.collect(asRef, qb.expr(vsValue));
                  }
                }
                if ((vsInto = aoQuery.$into) != null) {
                  intoUsed = _.escapeRegExp(`FILTER {{INTO ${vsInto}}}`);
                  intoPartial = `INTO ${vsInto}`;
                  voQuery = voQuery.filter(qb.expr(`{{INTO ${vsInto}}}`));
                }
                if ((voHaving = aoQuery.$having) != null) {
                  voQuery = voQuery.filter(this.parseFilter(Parser.parse(voHaving)));
                }
                if ((voSort = aoQuery.$sort) != null) {
                  voQuery = voQuery.sort(...((function() {
                    var asSortDirect, i, len, sortObj, vlSort;
                    vlSort = [];
                    for (i = 0, len = voSort.length; i < len; i++) {
                      sortObj = voSort[i];
                      for (asRef in sortObj) {
                        if (!hasProp.call(sortObj, asRef)) continue;
                        asSortDirect = sortObj[asRef];
                        vlSort.push(wrapReference(asRef));
                        vlSort.push(asSortDirect);
                      }
                    }
                    return vlSort;
                  })()));
                }
                if ((vnLimit = aoQuery.$limit) != null) {
                  if ((vnOffset = aoQuery.$offset) != null) {
                    voQuery = voQuery.limit(vnOffset, vnLimit);
                  } else {
                    voQuery = voQuery.limit(vnLimit);
                  }
                }
                if (aoQuery.$count != null) {
                  isCustomReturn = true;
                  voQuery = voQuery.collectWithCountInto('counter').return(qb.ref('counter').then('counter').else('0'));
                } else if ((vsSum = aoQuery.$sum) != null) {
                  isCustomReturn = true;
                  finAggUsed = `RETURN {{COLLECT AGGREGATE result = SUM\\(TO_NUMBER\\(${vsSum.replace('@', '')}\\)\\) RETURN result}}`;
                  finAggPartial = `COLLECT AGGREGATE result = SUM(TO_NUMBER(${vsSum.replace('@', '')})) RETURN result`;
                  voQuery = voQuery.return(qb.expr(`{{${finAggPartial}}}`));
                } else if ((vsMin = aoQuery.$min) != null) {
                  isCustomReturn = true;
                  voQuery = voQuery.sort(qb.ref(vsMin.replace('@', ''))).limit(1).return(qb.ref(vsMin.replace('@', '')));
                } else if ((vsMax = aoQuery.$max) != null) {
                  isCustomReturn = true;
                  voQuery = voQuery.sort(qb.ref(vsMax.replace('@', '')), 'DESC').limit(1).return(qb.ref(vsMax.replace('@', '')));
                } else if ((vsAvg = aoQuery.$avg) != null) {
                  isCustomReturn = true;
                  finAggUsed = `RETURN {{COLLECT AGGREGATE result = AVG\\(TO_NUMBER\\(${vsAvg.replace('@', '')}\\)\\) RETURN result}}`;
                  finAggPartial = `COLLECT AGGREGATE result = AVG(TO_NUMBER(${vsAvg.replace('@', '')})) RETURN result`;
                  voQuery = voQuery.return(qb.expr(`{{${finAggPartial}}}`));
                } else {
                  if (aoQuery.$return != null) {
                    if (aoQuery.$return !== '@doc') {
                      isCustomReturn = true;
                    }
                    voReturn = (function() {
                      var ref2;
                      if (_.isString(aoQuery.$return)) {
                        return qb.ref(aoQuery.$return.replace('@', ''));
                      } else if (_.isObject(aoQuery.$return)) {
                        vhObj = {};
                        ref2 = aoQuery.$return;
                        for (key in ref2) {
                          if (!hasProp.call(ref2, key)) continue;
                          value = ref2[key];
                          vhObj[key] = wrapReference(value);
                        }
                        return vhObj;
                      }
                    })();
                    if (aoQuery.$distinct) {
                      voQuery = voQuery.returnDistinct(voReturn);
                    } else {
                      voQuery = voQuery.return(voReturn);
                    }
                  }
                }
              })();
            }
            vsQuery = voQuery != null ? voQuery.toAQL() : void 0;
            if (intoUsed && new RegExp(intoUsed).test(vsQuery)) {
              vsQuery = vsQuery.replace(new RegExp(intoUsed), intoPartial);
            }
            if (finAggUsed && new RegExp(finAggUsed).test(vsQuery)) {
              vsQuery = vsQuery.replace(new RegExp(finAggUsed), finAggPartial);
            }
            vsQuery = new String(vsQuery);
            Reflect.defineProperty(vsQuery, 'isCustomReturn', {
              value: isCustomReturn
            });
            return vsQuery;
          }
        }));

        _Class.public(_Class.async({
          executeQuery: FuncG([UnionG(Object, String, QueryInterface)], CursorInterface)
        }, {
          default: function*(asQuery, options) {
            var voCursor, voNativeCursor;
            this.sendNotification(SEND_TO_LOG, `ArangoCollectionMixin::executeQuery asQuery ${asQuery}`, LEVELS[DEBUG]);
            voNativeCursor = db._query(`${asQuery}`);
            voCursor = asQuery.isCustomReturn ? ArangoCursor.new(null, voNativeCursor) : ArangoCursor.new(this, voNativeCursor);
            return voCursor;
          }
        }));

        _Class.initializeMixin();

        return _Class;

      }).call(this);
    }));
  };

}).call(this);
