// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of leanrc-arango-extension.

  // leanrc-arango-extension is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // leanrc-arango-extension is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with leanrc-arango-extension.  If not, see <https://www.gnu.org/licenses/>.

  // Миксин только для единообразного создания и регистрации в приложении RESQUE_EXECUTOR'а
  // но в случае с арангой не надо реализовывать экзекютор, т.к. аранга сама разберется с джобами
  var queues;

  queues = require('@arangodb/foxx/queues');

  module.exports = function(Module) {
    var FuncG, Mediator, Mixin, NotificationInterface, START_RESQUE;
    ({START_RESQUE, FuncG, NotificationInterface, Mixin, Mediator} = Module.prototype);
    return Module.defineMixin(Mixin('ArangoExecutorMixin', function(BaseClass = Mediator) {
      return (function() {
        var _Class;

        _Class = class extends BaseClass {};

        _Class.inheritProtected();

        _Class.public({
          listNotificationInterests: FuncG([], Array)
        }, {
          default: function() {
            return [START_RESQUE];
          }
        });

        _Class.public({
          handleNotification: FuncG(NotificationInterface)
        }, {
          default: function(aoNotification) {
            var voBody, vsName, vsType;
            vsName = aoNotification.getName();
            voBody = aoNotification.getBody();
            vsType = aoNotification.getType();
            switch (vsName) {
              case START_RESQUE:
                this.start();
            }
          }
        });

        _Class.public(_Class.async({
          start: Function
        }, {
          default: function*() {
            queues._updateQueueDelay();
          }
        }));

        _Class.public(_Class.async({
          stop: Function
        }, {
          default: function*() {}
        }));

        _Class.initializeMixin();

        return _Class;

      }).call(this);
    }));
  };

}).call(this);
